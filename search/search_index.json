{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Secrets Manager Workshop The Secrets Manager Workshop guides you through the use of AWS Secrets Manager. You will first use Secrets Manager with the Amazon Relational Database Service (RDS). You will then learn how to use Secrets Manager with the Amazon Elastic Container Service (ECS). Level : 300 Duration : one hour CSF Functions : Protect CAF Components : Preventive Prerequisites : AWS Account, IAM User (with admin permissions)","title":"Overview"},{"location":"#secrets-manager-workshop","text":"The Secrets Manager Workshop guides you through the use of AWS Secrets Manager. You will first use Secrets Manager with the Amazon Relational Database Service (RDS). You will then learn how to use Secrets Manager with the Amazon Elastic Container Service (ECS). Level : 300 Duration : one hour CSF Functions : Protect CAF Components : Preventive Prerequisites : AWS Account, IAM User (with admin permissions)","title":"Secrets Manager Workshop"},{"location":"cleanup/","text":"AWS Protecting Workloads Workshop - Cleanup Now that you have completed this workshop, follow the steps below to clean up the artifacts that were created. Go to the Systems Manager Patch Manager console. Click Configure patching . Click on the Patch baselines tab. Find the Amazon Linux 2 patch baseline that was supplied by AWS. Click on its radio button. From the Actions menu, click Set default patch baseline . This restores the default patch baseline for Amazon Linux 2 to that which was provided by AWS. Delete the custom patch baseline for Amazon Linux 2. Go to the Amazon Inspector console. Click on the Assessment runs menu item and delete the runs you created. You will be prompted for approval to delete the findings associated with the runs. Click on the Assessment templates menu item and delete the template you created. Click on the Assessment targets and delete the assessment target you created. Go to the WAF console and remove the conditions from the rules that you created Go to the WAF console and delete the conditions you created. Go to the WAF console and delete the rules you created. Go to the CloudFormation console and delete the stack that you created.","title":"AWS Protecting Workloads Workshop - Cleanup"},{"location":"cleanup/#aws-protecting-workloads-workshop-cleanup","text":"Now that you have completed this workshop, follow the steps below to clean up the artifacts that were created. Go to the Systems Manager Patch Manager console. Click Configure patching . Click on the Patch baselines tab. Find the Amazon Linux 2 patch baseline that was supplied by AWS. Click on its radio button. From the Actions menu, click Set default patch baseline . This restores the default patch baseline for Amazon Linux 2 to that which was provided by AWS. Delete the custom patch baseline for Amazon Linux 2. Go to the Amazon Inspector console. Click on the Assessment runs menu item and delete the runs you created. You will be prompted for approval to delete the findings associated with the runs. Click on the Assessment templates menu item and delete the template you created. Click on the Assessment targets and delete the assessment target you created. Go to the WAF console and remove the conditions from the rules that you created Go to the WAF console and delete the conditions you created. Go to the WAF console and delete the rules you created. Go to the CloudFormation console and delete the stack that you created.","title":"AWS Protecting Workloads Workshop - Cleanup"},{"location":"contribute/","text":"Contributing Guidelines Thank you for your interest in contributing to our project. Whether it's a bug report, new feature, correction, or additional documentation, we greatly value feedback and contributions from our community. Please read through this document before submitting any issues or pull requests to ensure we have all the necessary information to effectively respond to your bug report or contribution. Reporting Bugs/Feature Requests We welcome you to use the GitHub issue tracker to report bugs or suggest features. When filing an issue, please check existing open , or recently closed , issues to make sure somebody else hasn't already reported the issue. Please try to include as much information as you can. Details like these are incredibly useful: A reproducible test case or series of steps The version of our code being used Any modifications you've made relevant to the bug Anything unusual about your environment or deployment Contributing via Pull Requests Contributions via pull requests are much appreciated. Before sending us a pull request, please ensure that: You are working against the latest source on the master branch. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already. You open an issue to discuss any significant work - we would hate for your time to be wasted. To send us a pull request, please: Fork the repository. Modify the source; please focus on the specific change you are contributing. If you also reformat all the code, it will be hard for us to focus on your change. Ensure local tests pass. Commit to your fork using clear commit messages. Send us a pull request, answering any default questions in the pull request interface. Pay attention to any automated CI failures reported in the pull request, and stay involved in the conversation. GitHub provides additional document on forking a repository and creating a pull request . Finding contributions to work on Looking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any 'help wanted' issues is a great place to start. You can also contact us directly at aws-security-workshops@amazon.com Code of Conduct This project has adopted the Amazon Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opensource-codeofconduct@amazon.com with any additional questions or comments. Security issue notifications If you discover a potential security issue in this project we ask that you notify AWS/Amazon Security via our vulnerability reporting page . Please do not create a public github issue. Licensing See the LICENSE file for our project's licensing. We will ask you to confirm the licensing of your contribution. We may ask you to sign a Contributor License Agreement (CLA) for larger changes.","title":"Contributing"},{"location":"contribute/#contributing-guidelines","text":"Thank you for your interest in contributing to our project. Whether it's a bug report, new feature, correction, or additional documentation, we greatly value feedback and contributions from our community. Please read through this document before submitting any issues or pull requests to ensure we have all the necessary information to effectively respond to your bug report or contribution.","title":"Contributing Guidelines"},{"location":"contribute/#reporting-bugsfeature-requests","text":"We welcome you to use the GitHub issue tracker to report bugs or suggest features. When filing an issue, please check existing open , or recently closed , issues to make sure somebody else hasn't already reported the issue. Please try to include as much information as you can. Details like these are incredibly useful: A reproducible test case or series of steps The version of our code being used Any modifications you've made relevant to the bug Anything unusual about your environment or deployment","title":"Reporting Bugs/Feature Requests"},{"location":"contribute/#contributing-via-pull-requests","text":"Contributions via pull requests are much appreciated. Before sending us a pull request, please ensure that: You are working against the latest source on the master branch. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already. You open an issue to discuss any significant work - we would hate for your time to be wasted. To send us a pull request, please: Fork the repository. Modify the source; please focus on the specific change you are contributing. If you also reformat all the code, it will be hard for us to focus on your change. Ensure local tests pass. Commit to your fork using clear commit messages. Send us a pull request, answering any default questions in the pull request interface. Pay attention to any automated CI failures reported in the pull request, and stay involved in the conversation. GitHub provides additional document on forking a repository and creating a pull request .","title":"Contributing via Pull Requests"},{"location":"contribute/#finding-contributions-to-work-on","text":"Looking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any 'help wanted' issues is a great place to start. You can also contact us directly at aws-security-workshops@amazon.com","title":"Finding contributions to work on"},{"location":"contribute/#code-of-conduct","text":"This project has adopted the Amazon Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opensource-codeofconduct@amazon.com with any additional questions or comments.","title":"Code of Conduct"},{"location":"contribute/#security-issue-notifications","text":"If you discover a potential security issue in this project we ask that you notify AWS/Amazon Security via our vulnerability reporting page . Please do not create a public github issue.","title":"Security issue notifications"},{"location":"contribute/#licensing","text":"See the LICENSE file for our project's licensing. We will ask you to confirm the licensing of your contribution. We may ask you to sign a Contributor License Agreement (CLA) for larger changes.","title":"Licensing"},{"location":"getting-started/","text":"Getting Started Accessing AWS Event Engine To get started at an AWS event where the Event Engine is being used The CloudFormation Stack for this event should already be deployed. Click here to open the Event Engine dashboard in a separate browser tab. Enter the team hash code that you were provided and click Proceed .. Click AWS Console . Click Open Console . Make sure you are in the correct region. Go to the CloudFormation console. Click here to proceed to the Assess Phase of the Perimeter Layer. Optionally download the Workshop Companion Guide . Click here if you're not at an AWS event or are using your own account In order to complete these workshops, you'll need a valid, usable AWS Account . Use a personal account or create a new AWS account to ensure you have the necessary access and that you do not accidentally modify corporate resources. Do not use an AWS account from the company you work for. We stronly recommend that you use a non-production AWS account for this workshop such as a training, sandbox or personal account. If multiple participants are sharing a single account you should use unique names for the stack set and resources created in the console. Create an admin user If you don't already have an AWS IAM user with admin permissions, please use the following instructions to create one: Browse to the AWS IAM console. Click Users on the left navigation and then click Add User . Enter a User Name , check the checkbox for AWS Management Console access , enter a Custom Password , and click Next:Permissions . Click Attach existing policies directly , click the checkbox next to the AdministratorAccess , and click Next:review . Click Create User Click Dashboard on the left navigation and use the IAM users sign-in link to login as the admin user you just created. Add credits (optional ) If you are doing this workshop as part of an AWS sponsored event, you will receive credits to cover the costs. Below are the instructions for entering the credits: Browse to the AWS Account Settings console. Enter the Promo Code you received (these will be handed out at the beginning of the workshop). Enter the Security Check and click Redeem . You are now setup for the workshop!","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"getting-started/#accessing-aws-event-engine","text":"To get started at an AWS event where the Event Engine is being used The CloudFormation Stack for this event should already be deployed. Click here to open the Event Engine dashboard in a separate browser tab. Enter the team hash code that you were provided and click Proceed .. Click AWS Console . Click Open Console . Make sure you are in the correct region. Go to the CloudFormation console. Click here to proceed to the Assess Phase of the Perimeter Layer. Optionally download the Workshop Companion Guide . Click here if you're not at an AWS event or are using your own account In order to complete these workshops, you'll need a valid, usable AWS Account . Use a personal account or create a new AWS account to ensure you have the necessary access and that you do not accidentally modify corporate resources. Do not use an AWS account from the company you work for. We stronly recommend that you use a non-production AWS account for this workshop such as a training, sandbox or personal account. If multiple participants are sharing a single account you should use unique names for the stack set and resources created in the console. Create an admin user If you don't already have an AWS IAM user with admin permissions, please use the following instructions to create one: Browse to the AWS IAM console. Click Users on the left navigation and then click Add User . Enter a User Name , check the checkbox for AWS Management Console access , enter a Custom Password , and click Next:Permissions . Click Attach existing policies directly , click the checkbox next to the AdministratorAccess , and click Next:review . Click Create User Click Dashboard on the left navigation and use the IAM users sign-in link to login as the admin user you just created. Add credits (optional ) If you are doing this workshop as part of an AWS sponsored event, you will receive credits to cover the costs. Below are the instructions for entering the credits: Browse to the AWS Account Settings console. Enter the Promo Code you received (these will be handed out at the beginning of the workshop). Enter the Security Check and click Redeem . You are now setup for the workshop!","title":"Accessing AWS Event Engine"},{"location":"1_RotatePrivateRDS/","text":"AWS Secrets Manager Workshop Module 1 - Rotating the secret for a private Amazon RDS database Introduction This module shows how to use AWS Secrets Manager for rotating the password for a private Amazon RDS database. Architecture Overview Here's a diagram of what we are going to build. This environment consists of a VPC in the us-east-1 region with two subnets. The subnets containts an Amazon EC2 bastion host running Amazon Linux 2 used for running AWS CLI commands and a private, not publicly-accessible, Amazon RDS MySQL database instance. The subnets are chosen based on the presence of a VPC endpoint for AWS Secrets Manager. When we initiate a rotation of the RDS database, the AWS Lambda function that Secrets Manager uses will reach out to the Amazon RDS database to perform the rotation. Security Note Security Note For the sake of simplicity, this tutorial uses jq to parse the secret value into environment variables to allow for easy command line manipulation. This is NOT a security best practice for a production environment. In a production environment, we recommend that you don't store passwords in environment variables. Prerequisites In order to complete this workshop you'll need the following: * an AWS Account with administrator access to services used in the module including AWS Secrets Manager, AWS CloudFormation, Amazon EC2, Amazon RDS, and Amazon VPC Charges You will incur charges for the services used in these modules. The pricing for each service is available on that service's pricing page. 1. Choose a region You need to choose a region that offers AWS Secrets Manager and Amazon RDS. For information about service availability, check the region table . Tip: The AWS region name is always listed in the upper-right corner of the AWS Management Console, in the navigation bar. Make a note of the AWS region name , for example, US East (N. Virginia) . For more information about regions, see: AWS Regions and Endpoints . 2. Complete initial environment configuration (expand for details) In this section, you will use AWS CloudFormation to build the environment shown in the diagram above. Complete all the steps below unless they are marked \"optional.\" 2.1. Download the AWS Cloudformation template and save it to your workstation. 2.2. In the AWS Management Console, Under Management Tools, Select CloudFormation . 2.3. Click the Create stack button. 2.4. Select the Upload a template to Amazon S3 radio button. 2.5. Click the Choose file button and use the file navigation pop-up to select the CloudFormation template you just downloaded. 2.6. Click the Next button. Enter the values below into Stack name and parameter fields: Field name Value Stack name You can choose or just use smdemo Enter the name of the database Accept the default value of smdemo Enter the TCP port for the database endpoint Accept the default value of 3306 Enter a prefix for the Name tag Accept the default value of smdemo Enter the value for the Project tag Accept the default value of smproj Enter the SSM AMI Id Parameter Accept the default value - Do not change! 2.7. Click the Next button. 2.8. On the Options page, click the Next button. 2.9. On the Review page, check the acknowledgement box and click the Create button. AWS CloudFormation will the build the resource stack. This may take 15-20 minutes to complete. Wait until the status of the stack changes to \"CREATE_COMPLETE.\" You can periodically refresh the page to update the status. If the stack creation fails, look at the bottom of the page and select the Events tab. You should be able to see the reason for the failure in the Status Reason column. A common reason for a failure is not having specified some of the parameters when creating the stack. 2.10. Let's take a look at the Output section of the CloudFormation stack. The outputs values include the RDS master username and password, both of which are set to random alphanumeric strings for added security. You will store the DBUser and DBPassword values as a secret in Secrets Manager. You will se the DBEndpoint value to help you select the correct database in Secrets Manager. Another output value is the IP address of the bastion host. You will need this IP address to set up a connection to the bastion host later in this module. Keep this window open. 3. Store the secret value in AWS Secrets Manager (expand for details) In this section, you will store the RDS database credentials in AWS Secrets Manager. You will use the DBUser and DBPassword values that were output from the AWS CloudFormation. - __3.1.__ Open the [AWS Secrets Manager Console](https://console.aws.amazon.com/secretsmanager/home) in a new tab or window. - __3.2.__ Click **Store a new secret**. - __3.3.__ Select the **Credentials for RDS database** radio button. - __3.4.__ Copy the values for the DBUser and DBPassword CloudFormation output values that you got from item 2.10 above into the **User name** and **Password** fields respectively. Scroll down to the bottom of the page and you will see a list of your RDS instances. Using the DBendpoint output value that you got from item 2.10 above, select the RDS instance. ![AWS Secrets Manager store secret part 1](img/1_RotatePrivateRDSSMStore1.png) - __3.5.__ Click **Next**. - __3.6.__ Enter a name for the secret. You can pick a name or just use **smdemo** as shown below. Note that this must bot be the name of a secret that is pending deletion. ![AWS Secrets Manager store secret part 2](img/1_RotatePrivateRDSSMStore2.png) - __3.7.__ Click **Next**. - __3.8__ Select **Disable automatic rotation** and then click **Next**. We will enable rotation later in this module. ![AWS Secrets Manager store secret part 3](img/1_RotatePrivateRDSSMStore3.png) - __3.9.__ Click **Store**. You have now stored your secret value as shown below. ![AWS Secrets Manager store secret part 4](img/1_RotatePrivateRDSSMStore4.png) 4. Connect to the Amazon EC2 bastion host and access the RDS database (expand for details) In this section, you will connect to the bastion host so you can run scripts that the CloudFormation template has created on the instance. ___Complete all the steps below unless they are marked \"optional.\"___ - __4.1.__ Connect to the bastion host using AWS Systems Manager Session Manager. - __4.2.__ After you login, use the **sudo su ec2-user** command since the ec2-user id is the owner of all the scripts. - __4.3.__ Change to the home directory of the ec2-user id by entering the **cd** command without any arguments. - __4.4.__ Use the **ls** command to list the contents of the home directory. You will see two shell scripts. * mysql.oldway.sh - This shell script connects to the database the \"old\" way, using a hard-coded password. * mysql.newway.sh - This shell script connects to the database the \"new\" way, using AWS Secrets Manager. - __4.5.__ Let's take a look at the file mysql.oldway.sh. You can use the **cat** command to do this. In the example below, the values PASSWORD, USER, and ENDPOINT represent the hard-coded database password, username, and host endpoint. \u0002wzxhzdk:0\u0003 - __4.6.__ Now let's try this script by running the following commands. The first command invokes the script. The subsequent commands select the database, display the table names in the database, query the rows in the table, and exit MySQL. \u0002wzxhzdk:1\u0003 You can see an example of the output below. This shows that you can access the database, the \"old\" way, with a hard-coded user name and password. You may be wondering why MariaDB appears in the image below. Amazon Linux 2 includes the MariaDB port of the **mysql** command as an \"extras\" module. The **mysql** program is compatible with both MySQL and MariaDB. ![AWS Secrets Manager old way before rotation](img/1_RotatePrivateRDSMSQLoldpre.png) - __4.7.__ Let's take a look at the file mysql.newway.sh. You can use the **cat** command to do this. As mentioned above, for the sake of simplicity, the scripts used in the tutorial use *jq* to parse the secret value into shell variables to allow for easy command line manipulation. This is NOT a security best practice for a production environment. In a production environment, we recommend that you don't store passwords in environment variables, and work with them in plaintext at the command line. \u0002wzxhzdk:2\u0003 - __4.8.__ Now let's try this script by running the following commands. The first command invokes the script. **Note that you must specify the name of the secret!** The subsequent commands select the database, display the table names in the database, query the rows in the table, and exit MySQL. \u0002wzxhzdk:3\u0003 You can see an example of the output below. This shows that you can access the database, the \"new\" way, using AWS Secrets Manager. ![AWS Secrets Manager new way before rotation](img/1_RotatePrivateRDSMSQLnewpre.png) 5. Enable AWS Secrets Manager and perform the first password rotation (expand for details) In this section, you will enable the rotation of the secret you created in AWS Secrets Manager. - __5.1.__ Go to the main screen of the AWS Secrets Manager console. - __5.2.__ Click on the secret that you previously created. - __5.3.__ Click **Edit rotation**. - __5.4.__ Select **Enable automatic rotation**. Choose **30 days** for the rotation interval. Click **Use this secret** because we will be using the credentials of this secret to access the database and then rotate the same credentials. Click **Save** to begin the process. ![AWS Secrets Manager rotation part 1](img/1_RotatePrivateRDSRotate1.png) - __5.5.__ You will see a message telling you that the rotation is beginning and that you should remain on the page until it is complete. AWS Secrets Manager is now using the [AWS Serverless Application Repository](https://aws.amazon.com/serverless/serverlessrepo/) to install an [AWS Lambda rotation](https://aws.amazon.com/lambda/) function on your behalf. **Do not leave this page until the rotation is complete.** ![AWS Secrets Manager rotation part 2](img/1_RotatePrivateRDSRotate2.png) A message will appear when the rotation is complete. **Refresh your browser window to update your any cached fields.** ![AWS Secrets Manager rotation part 3](img/1_RotatePrivateRDSRotate3.png) - __5.6.__ Click **Retrieve secret value** to see the new password value. 6. Connect to the database after rotating the password (expand for details) Let's try to connect to the database again, both the \"old\" way with a hard-coded password, the \"new\" way with AWS Secrets Manager. - __6.1.__ On the bastion host, repeat step 4.6 with the **mysql.oldway.sh** script. You should receive an error message (access denied) because the mysql.oldway.sh script has the same hard-coded password. ![AWS Secrets Manager old way after rotation](img/1_RotatePrivateRDSMSQLoldpost.png) - __6.2.__ Repeat step 4.8 with the **mysql.newway.sh** script. You should be able to connect to the database just as you did before since this script uses AWS Secrets Manager to fetch the updated credentials. 7. Clean up (expand for details) Now that you have seen how AWS Secrets Manager can rotate the credentials for a private database, please follow these steps to remove the resources you created, including the private database. - __7.1.__ [Delete the secret you created in Secrets Manager](https://docs.aws.amazon.com/secretsmanager/latest/userguide/manage_delete-restore-secret.html?shortFooter=true). Note that when you delete a secret, the deletion is scheduled for a minimum of seven days in the future. - __7.2.__ When you enabled rotation on your secret, AWS Secrets Manager used AWS CloudFormation to create an AWS Lambda function to do the rotation using the [AWS Serverless Application Repository](https://aws.amazon.com/serverless/serverlessrepo/). Go to the AWS CloudFormation console and delete this stack. The name of the stack begins with the following string: **aws-serverless-repository-SecretsManagerRDSMySQLRotationSingleUser** Look for a stack with this naming convention that was created at about the same time as you enabled rotation. **Do not proceed to the next step until this stack has been deleted.** - __7.3.__ [Delete the main CloudFormation stack](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-console-delete-stack.html) that you created in steps 2.1 through 2.9. The stack deletion process may take several minutes to complete. If the stack deletion process either pauses or fails, it may be because of an Elastic Network Interface that gets created when rotation is enabled. If you delete this interface and restart the stack deletion. 8. Conclusion You have completed this module. Visit the main Secrets Managager workshop site for more workshops as they become available.","title":"Amazon RDS"},{"location":"1_RotatePrivateRDS/#aws-secrets-manager-workshop","text":"","title":"AWS Secrets Manager Workshop"},{"location":"1_RotatePrivateRDS/#module-1-rotating-the-secret-for-a-private-amazon-rds-database","text":"","title":"Module 1 - Rotating the secret for a private Amazon RDS database"},{"location":"1_RotatePrivateRDS/#introduction","text":"This module shows how to use AWS Secrets Manager for rotating the password for a private Amazon RDS database.","title":"Introduction"},{"location":"1_RotatePrivateRDS/#architecture-overview","text":"Here's a diagram of what we are going to build. This environment consists of a VPC in the us-east-1 region with two subnets. The subnets containts an Amazon EC2 bastion host running Amazon Linux 2 used for running AWS CLI commands and a private, not publicly-accessible, Amazon RDS MySQL database instance. The subnets are chosen based on the presence of a VPC endpoint for AWS Secrets Manager. When we initiate a rotation of the RDS database, the AWS Lambda function that Secrets Manager uses will reach out to the Amazon RDS database to perform the rotation.","title":"Architecture Overview"},{"location":"1_RotatePrivateRDS/#security-note","text":"Security Note For the sake of simplicity, this tutorial uses jq to parse the secret value into environment variables to allow for easy command line manipulation. This is NOT a security best practice for a production environment. In a production environment, we recommend that you don't store passwords in environment variables.","title":"Security Note"},{"location":"1_RotatePrivateRDS/#prerequisites","text":"In order to complete this workshop you'll need the following: * an AWS Account with administrator access to services used in the module including AWS Secrets Manager, AWS CloudFormation, Amazon EC2, Amazon RDS, and Amazon VPC","title":"Prerequisites"},{"location":"1_RotatePrivateRDS/#charges","text":"You will incur charges for the services used in these modules. The pricing for each service is available on that service's pricing page.","title":"Charges"},{"location":"1_RotatePrivateRDS/#1-choose-a-region","text":"You need to choose a region that offers AWS Secrets Manager and Amazon RDS. For information about service availability, check the region table . Tip: The AWS region name is always listed in the upper-right corner of the AWS Management Console, in the navigation bar. Make a note of the AWS region name , for example, US East (N. Virginia) . For more information about regions, see: AWS Regions and Endpoints .","title":"1. Choose a region"},{"location":"1_RotatePrivateRDS/#2-complete-initial-environment-configuration","text":"(expand for details) In this section, you will use AWS CloudFormation to build the environment shown in the diagram above. Complete all the steps below unless they are marked \"optional.\" 2.1. Download the AWS Cloudformation template and save it to your workstation. 2.2. In the AWS Management Console, Under Management Tools, Select CloudFormation . 2.3. Click the Create stack button. 2.4. Select the Upload a template to Amazon S3 radio button. 2.5. Click the Choose file button and use the file navigation pop-up to select the CloudFormation template you just downloaded. 2.6. Click the Next button. Enter the values below into Stack name and parameter fields: Field name Value Stack name You can choose or just use smdemo Enter the name of the database Accept the default value of smdemo Enter the TCP port for the database endpoint Accept the default value of 3306 Enter a prefix for the Name tag Accept the default value of smdemo Enter the value for the Project tag Accept the default value of smproj Enter the SSM AMI Id Parameter Accept the default value - Do not change! 2.7. Click the Next button. 2.8. On the Options page, click the Next button. 2.9. On the Review page, check the acknowledgement box and click the Create button. AWS CloudFormation will the build the resource stack. This may take 15-20 minutes to complete. Wait until the status of the stack changes to \"CREATE_COMPLETE.\" You can periodically refresh the page to update the status. If the stack creation fails, look at the bottom of the page and select the Events tab. You should be able to see the reason for the failure in the Status Reason column. A common reason for a failure is not having specified some of the parameters when creating the stack. 2.10. Let's take a look at the Output section of the CloudFormation stack. The outputs values include the RDS master username and password, both of which are set to random alphanumeric strings for added security. You will store the DBUser and DBPassword values as a secret in Secrets Manager. You will se the DBEndpoint value to help you select the correct database in Secrets Manager. Another output value is the IP address of the bastion host. You will need this IP address to set up a connection to the bastion host later in this module. Keep this window open.","title":"2. Complete initial environment configuration"},{"location":"1_RotatePrivateRDS/#3-store-the-secret-value-in-aws-secrets-manager","text":"(expand for details) In this section, you will store the RDS database credentials in AWS Secrets Manager. You will use the DBUser and DBPassword values that were output from the AWS CloudFormation. - __3.1.__ Open the [AWS Secrets Manager Console](https://console.aws.amazon.com/secretsmanager/home) in a new tab or window. - __3.2.__ Click **Store a new secret**. - __3.3.__ Select the **Credentials for RDS database** radio button. - __3.4.__ Copy the values for the DBUser and DBPassword CloudFormation output values that you got from item 2.10 above into the **User name** and **Password** fields respectively. Scroll down to the bottom of the page and you will see a list of your RDS instances. Using the DBendpoint output value that you got from item 2.10 above, select the RDS instance. ![AWS Secrets Manager store secret part 1](img/1_RotatePrivateRDSSMStore1.png) - __3.5.__ Click **Next**. - __3.6.__ Enter a name for the secret. You can pick a name or just use **smdemo** as shown below. Note that this must bot be the name of a secret that is pending deletion. ![AWS Secrets Manager store secret part 2](img/1_RotatePrivateRDSSMStore2.png) - __3.7.__ Click **Next**. - __3.8__ Select **Disable automatic rotation** and then click **Next**. We will enable rotation later in this module. ![AWS Secrets Manager store secret part 3](img/1_RotatePrivateRDSSMStore3.png) - __3.9.__ Click **Store**. You have now stored your secret value as shown below. ![AWS Secrets Manager store secret part 4](img/1_RotatePrivateRDSSMStore4.png)","title":"3. Store the secret value in AWS Secrets Manager"},{"location":"1_RotatePrivateRDS/#4-connect-to-the-amazon-ec2-bastion-host-and-access-the-rds-database","text":"(expand for details) In this section, you will connect to the bastion host so you can run scripts that the CloudFormation template has created on the instance. ___Complete all the steps below unless they are marked \"optional.\"___ - __4.1.__ Connect to the bastion host using AWS Systems Manager Session Manager. - __4.2.__ After you login, use the **sudo su ec2-user** command since the ec2-user id is the owner of all the scripts. - __4.3.__ Change to the home directory of the ec2-user id by entering the **cd** command without any arguments. - __4.4.__ Use the **ls** command to list the contents of the home directory. You will see two shell scripts. * mysql.oldway.sh - This shell script connects to the database the \"old\" way, using a hard-coded password. * mysql.newway.sh - This shell script connects to the database the \"new\" way, using AWS Secrets Manager. - __4.5.__ Let's take a look at the file mysql.oldway.sh. You can use the **cat** command to do this. In the example below, the values PASSWORD, USER, and ENDPOINT represent the hard-coded database password, username, and host endpoint. \u0002wzxhzdk:0\u0003 - __4.6.__ Now let's try this script by running the following commands. The first command invokes the script. The subsequent commands select the database, display the table names in the database, query the rows in the table, and exit MySQL. \u0002wzxhzdk:1\u0003 You can see an example of the output below. This shows that you can access the database, the \"old\" way, with a hard-coded user name and password. You may be wondering why MariaDB appears in the image below. Amazon Linux 2 includes the MariaDB port of the **mysql** command as an \"extras\" module. The **mysql** program is compatible with both MySQL and MariaDB. ![AWS Secrets Manager old way before rotation](img/1_RotatePrivateRDSMSQLoldpre.png) - __4.7.__ Let's take a look at the file mysql.newway.sh. You can use the **cat** command to do this. As mentioned above, for the sake of simplicity, the scripts used in the tutorial use *jq* to parse the secret value into shell variables to allow for easy command line manipulation. This is NOT a security best practice for a production environment. In a production environment, we recommend that you don't store passwords in environment variables, and work with them in plaintext at the command line. \u0002wzxhzdk:2\u0003 - __4.8.__ Now let's try this script by running the following commands. The first command invokes the script. **Note that you must specify the name of the secret!** The subsequent commands select the database, display the table names in the database, query the rows in the table, and exit MySQL. \u0002wzxhzdk:3\u0003 You can see an example of the output below. This shows that you can access the database, the \"new\" way, using AWS Secrets Manager. ![AWS Secrets Manager new way before rotation](img/1_RotatePrivateRDSMSQLnewpre.png)","title":"4. Connect to the Amazon EC2 bastion host and access the RDS database"},{"location":"1_RotatePrivateRDS/#5-enable-aws-secrets-manager-and-perform-the-first-password-rotation","text":"(expand for details) In this section, you will enable the rotation of the secret you created in AWS Secrets Manager. - __5.1.__ Go to the main screen of the AWS Secrets Manager console. - __5.2.__ Click on the secret that you previously created. - __5.3.__ Click **Edit rotation**. - __5.4.__ Select **Enable automatic rotation**. Choose **30 days** for the rotation interval. Click **Use this secret** because we will be using the credentials of this secret to access the database and then rotate the same credentials. Click **Save** to begin the process. ![AWS Secrets Manager rotation part 1](img/1_RotatePrivateRDSRotate1.png) - __5.5.__ You will see a message telling you that the rotation is beginning and that you should remain on the page until it is complete. AWS Secrets Manager is now using the [AWS Serverless Application Repository](https://aws.amazon.com/serverless/serverlessrepo/) to install an [AWS Lambda rotation](https://aws.amazon.com/lambda/) function on your behalf. **Do not leave this page until the rotation is complete.** ![AWS Secrets Manager rotation part 2](img/1_RotatePrivateRDSRotate2.png) A message will appear when the rotation is complete. **Refresh your browser window to update your any cached fields.** ![AWS Secrets Manager rotation part 3](img/1_RotatePrivateRDSRotate3.png) - __5.6.__ Click **Retrieve secret value** to see the new password value.","title":"5. Enable AWS Secrets Manager and perform the first password rotation"},{"location":"1_RotatePrivateRDS/#6-connect-to-the-database-after-rotating-the-password","text":"(expand for details) Let's try to connect to the database again, both the \"old\" way with a hard-coded password, the \"new\" way with AWS Secrets Manager. - __6.1.__ On the bastion host, repeat step 4.6 with the **mysql.oldway.sh** script. You should receive an error message (access denied) because the mysql.oldway.sh script has the same hard-coded password. ![AWS Secrets Manager old way after rotation](img/1_RotatePrivateRDSMSQLoldpost.png) - __6.2.__ Repeat step 4.8 with the **mysql.newway.sh** script. You should be able to connect to the database just as you did before since this script uses AWS Secrets Manager to fetch the updated credentials.","title":"6. Connect to the database after rotating the password"},{"location":"1_RotatePrivateRDS/#7-clean-up","text":"(expand for details) Now that you have seen how AWS Secrets Manager can rotate the credentials for a private database, please follow these steps to remove the resources you created, including the private database. - __7.1.__ [Delete the secret you created in Secrets Manager](https://docs.aws.amazon.com/secretsmanager/latest/userguide/manage_delete-restore-secret.html?shortFooter=true). Note that when you delete a secret, the deletion is scheduled for a minimum of seven days in the future. - __7.2.__ When you enabled rotation on your secret, AWS Secrets Manager used AWS CloudFormation to create an AWS Lambda function to do the rotation using the [AWS Serverless Application Repository](https://aws.amazon.com/serverless/serverlessrepo/). Go to the AWS CloudFormation console and delete this stack. The name of the stack begins with the following string: **aws-serverless-repository-SecretsManagerRDSMySQLRotationSingleUser** Look for a stack with this naming convention that was created at about the same time as you enabled rotation. **Do not proceed to the next step until this stack has been deleted.** - __7.3.__ [Delete the main CloudFormation stack](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-console-delete-stack.html) that you created in steps 2.1 through 2.9. The stack deletion process may take several minutes to complete. If the stack deletion process either pauses or fails, it may be because of an Elastic Network Interface that gets created when rotation is enabled. If you delete this interface and restart the stack deletion.","title":"7. Clean up"},{"location":"1_RotatePrivateRDS/#8-conclusion","text":"You have completed this module. Visit the main Secrets Managager workshop site for more workshops as they become available.","title":"8. Conclusion"},{"location":"1_RotatePrivateRDS/img/","text":"","title":"Home"}]}